name: test-model

services:
  # ====================
  # Applications
  # ====================
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      target: final
    image: app/frontend:latest    
    ports:
      - 20001:80
    networks:
      - app-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "22001:9113"
    environment:
      - NGINX_HOST=nginx
      - NGINX_PORT=4561
    depends_on:
      - frontend
    networks:
      - app-network

  apigateway:
    container_name: apigateway
    build:
      context: ./apigateway/src
      target: final
    image: app/apigateway:latest
    environment:
      SERVICE_URL: http://service:8080/
      KAFKA_URL: kafka:9092
    ports:
      - 20002:8080
    networks:
      - app-network
    depends_on:
      - service
      - kafka

  service:
    container_name: service
    build:
      context: ./service/src
      target: final
    image: app/service:latest
    environment:
      REDIS_URL: redis:6379
      KAFKA_URL: kafka:9092
    ports:
      - 20003:8080
    extra_hosts:
      - "localhost:192.168.1.112"
    networks:
      - app-network
    depends_on:
      - redis
      - kafka

  # ====================
  # Redis
  # ====================
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "21001:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    restart: always
    networks:
      - app-network

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    ports:
      - "22002:9121"
    environment:
      REDIS_ADDR: redis:6379
    depends_on:
      - redis
    networks:
      - app-network

  # ====================
  # Kafka
  # ====================
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_JMX_PORT: 1099
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"    
    ports:
      - "23007:2181"
    networks:
      - app-network

  zookeeper-exporter:
    image: dabealu/zookeeper-exporter:latest
    container_name: zookeeper-exporter
    ports:
      - "22006:9141"
    command: --zk-hosts="zookeeper:2181"
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "21002:9092"
    networks:
      - app-network

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command: 
      - "--kafka.server=kafka:9092"
    ports:
      - "22003:9308"
    restart: always     
    depends_on:
      - kafka
    networks:
      - app-network

  # ====================
  # Prometheus
  # ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "23001:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  # ====================
  # Elasticsearch
  # ====================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # 調整內存配置
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "23002:9200" # Elasticsearch API
    volumes:
      - ./elastic/data:/usr/share/elasticsearch/data
    networks:
      - app-network

  elasticsearch-exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    container_name: elasticsearch-exporter
    command:
     - '--es.uri=http://elasticsearch:9200'    
    restart: always
    ports:
      - "22004:9114" # Exporter 默認端口
    depends_on:
      - elasticsearch
    networks:
      - app-network

  # ====================
  # Logstash
  # ====================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: logstash
    ports:
      - "23003:5044" # Logstash Beats input
      - "23004:9600" # Logstash monitoring API
    environment:
      - "http.host=0.0.0.0"
      - "http.port=9600"
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf # Logstash 配置文件
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - elasticsearch
    networks:
      - app-network

  logstash-exporter:
    image: kuskoman/logstash-exporter:v1.8.3
    container_name: logstash-exporter
    environment:      
      - LOGSTASH_URL=${LOGSTASH_URL:-http://logstash:9600}
      - LOG_LEVEL=${LOG_LEVEL:-debug}      
    volumes:
      - ./logstash/logstash-exporter.yml:/app/config.yml
    ports:
      - "22005:9198"
    depends_on:
      - logstash
    networks:
      - app-network

  # ====================
  # Kibana
  # ====================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    command: bash -c "if [ ! -d /usr/share/kibana/plugins/kibanaPrometheusExporter ]; then bin/kibana-plugin install https://github.com/pjhampton/kibana-prometheus-exporter/releases/download/8.10.2/kibanaPrometheusExporter-8.10.2.zip && bin/kibana;else bin/kibana; fi"
    ports:
      - "23005:5601" # Kibana Web UI
    depends_on:
      - elasticsearch
    networks:
      - app-network

  # ====================
  # Grafana
  # ====================

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin # 設置 Grafana 的管理員密碼
    ports:
      - "23006:3000"  # 映射 3000 端口，Grafana 默認的 Web UI 端口
    volumes:
      - ./grafana/data:/var/lib/grafana  # 保留 Grafana 的數據
    networks:
      - app-network

networks:
  app-network:
    driver: bridge # Default network driver

  

  

